plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'  // Плагин для Allure
}

repositories {
    mavenCentral()
}

// Define the version of Allure and AspectJ
def allureVersion = "2.26.0"
def aspectJVersion = '1.9.22.1'

// Define configuration for AspectJ agent
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = false  // Обычно агент-конфигурации только разрешаются, но не потребляются
    }
}

dependencies {
    testImplementation platform("org.junit:junit-bom:5.10.2")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    implementation 'net.serenity-bdd:serenity-core:4.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    testImplementation 'org.assertj:assertj-core:3.26.3'
    implementation 'com.codeborne:selenide:7.4.3'
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.13.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.0'
    implementation 'ch.qos.logback:logback-classic:1.4.12'

    // Import allure-bom to ensure correct versions of all the dependencies are used
    testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
    testImplementation "io.qameta.allure:allure-junit5"

    // Add AspectJ weaver to the agent configuration
    add('agent', "org.aspectj:aspectjweaver:$aspectJVersion")
}

test {
    ignoreFailures = true
    useJUnitPlatform()
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

// Настройки Allure плагина
allure {
    version = "$allureVersion"
    autoconfigure = true
}